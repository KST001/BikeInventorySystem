@page "/login"
@namespace BikeInventorySystem.Data
@inject NavigationManager NavManager


<section class="vh-100">
    <div class="container py-5 h-100">
        <div class="row d-flex align-items-center justify-content-center h-100">
            <div class="col-md-8 col-lg-7 col-xl-6">
                <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-login-form/draw2.svg"
                     class="img-fluid" alt="Phone image">
            </div>
            <div class="col-md-7 col-lg-5 col-xl-5 offset-xl-1" >
                <form class="text-center" @onsubmit="LoginHandler">
                    <img class="mb-4" src="/appicon.png" alt="" height="72">
                    <h1 class="h1 mb-3 fw-normal">Login</h1>
                  
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control username" @bind="_username" placeholder="Username" />
                        <label for="floatingInput">Username</label>
                    </div>
                    <div class="form-floating mb-3">
                        <input type="password" class="form-control password" @bind="_password" placeholder="Password" />
                        <label for="floatingPassword">Password</label>
                    </div>
                    @if (!string.IsNullOrEmpty(_errorMessage))
                    {
                        <AlertMessage Type="danger" Message="@_errorMessage" />
                    }
                    <button class="w-100 btn btn-lg btn-primary" type="submit">
                        <span class="oi oi-account-login"></span> Login
                    </button>
                </form>
            </div>
        </div>
    </div>
</section>


@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private bool _showDefaultCredentials { get; set; }
    private string _username { get; set; }
    private string _password { get; set; }
    private string _errorMessage = "";

    protected override void OnInitialized()
    {
        try
        {
            var user = UsersService.Login(UsersService.SeedUsername, UsersService.SeedPassword);
            _showDefaultCredentials = user.HasInitialPassword;
        }
        catch { }

        _globalState.CurrentUser = null;
        _errorMessage = "";
    }

    private void LoginHandler()
    {
        try
        {
            _errorMessage = "";
            _globalState.CurrentUser = UsersService.Login(_username, _password);
            if (_globalState.CurrentUser != null)
            {
                NavManager.NavigateTo(_globalState.CurrentUser.HasInitialPassword ? "/dashboard" : "/");
            }
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            Console.WriteLine(e);
        }
    }
}
